# -*- coding: utf-8 -*-
"""สำเนาของ IPT_2565_Summer_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IuGRMBO4Dd4TThI6fOIVZWihHjQpOdwW
"""

# วิธีการส่ง
# ให้นักศึกษาไปที่ File -> Download -> Download .py แล้วส่ง .py ที่ได้ไปที่ Google Classroom
# อย่าลืมเปลี่ยนชื่อ + รหัส นศ ใน code นะครับ
# อนุญาตให้เปิดโนท หนังสือ อินเตอร์เน็ตได้
# ห้ามถามเพื่อนหรือปรึกษาผู้อื่นโดยเด็จขาด
# หากเจอ code จากเว็ปไซต์อื่นๆ สามารถนำมาใช้ตอบคำถามได้ แต่ให้เขียนบอกด้วยว่า เอามาจากไหน (ไม่หักคะแนน ผมแค่อยากรู้)

# คำถามมี 4 ข้อหลัก
# PROBLEM 1: LOOP [TOTAL 30 points + Bonus 10 points]
# PROBLEM 2: LOOP + ERROR HANDLING [TOTAL 35 points]
# PROBLEM 3: CLASS + INHERITANCE [TOTAL 35 points]
# BONUS [20 points]
# รวม 100 คะแนน + Bonus 30 คะแนน

# อย่าลืมชื่อ - รหัส นศ
my_student_id = 164410222002
my_student_name = "Tanadet Somtip"

# LOOP [30 PTS]
# ให้นักศึกษาเขียน function หาผลรวมกำลังสองของเลขเรียง sum_sequence_squared ให้สมบูรณ์
# โดยที่ ให้ ผลรวมกำลังสองของเลขเรียง ตั้งแต่ x ถึง y เท่ากับ
#         x**2 + (x+1)**2 + ... + (y-1)**2 + y**2
# เช่น ผลรวมกำลังสองของเลขเรียง ตั้งแต่ 1 ถึง 4 = 1**2 + 2**2 + 3**2 + 4**2 = 1 + 4 + 9 + 16 = 30
# เช่น ผลรวมกำลังสองของเลขเรียง ตั้งแต่ 7 ถึง 9 = 7**2 + 8**2 + 9**2 = 49 + 64 + 81 = 194


def sum_sequence_squared(first, last):
    total = 0
    for i in range(first, last+1) :
        total = total + (i*i )
    return total

print("คำนวนได้", sum_sequence_squared(1, 4), "ควรจะได้", 30)
print("คำนวนได้", sum_sequence_squared(7, 9), "ควรจะได้", 194)
print("คำนวนได้", sum_sequence_squared(2022, 2565), "ควรจะได้", 2874933104)

# LOOP [BONUS 10 PTS]
# ให้นักศึกษาเขียน sum_sequence_squared_even ซึ่งต่างจาก sum_sequence_squared คือ
# sum_sequence_squared_even จะสนเฉพาะเลขคู่เท่านั้น
# เช่น ผลรวมกำลังสองของเลขคู่เรียง ตั้งแต่ 1 ถึง 4 = 2**2 + 4**2 = 4 + 16 = 20 (1 กับ 3 ไม่ใช่เลขคู่ โยนทิ้ง)
# เช่น ผลรวมกำลังสองของเลขคู่เรียง ตั้งแต่ 7 ถึง 9 = 8**2 = 64 (7 กับ 9 ไม่ใช่เลขคู่ โยนทิ้ง)

def sum_sequence_squared_even(first, last):
    total = 0
    for i in range(first, first+4) :
        total = total + (i*i )
    return total

print("คำนวนได้", sum_sequence_squared_even(1, 4), "ควรจะได้", 20)
print("คำนวนได้", sum_sequence_squared_even(7, 9), "ควรจะได้", 64)
print("คำนวนได้", sum_sequence_squared_even(2022, 2565), "ควรจะได้", 1436842720)

# ERROR HANDLING [35 PTS]

# หารากที่สองที่เป็นบวก
# รากที่สองที่เป็นบวก หรือ กรณฑ์ที่สอง หรือที่เราเรียกกันว่า "ถอดรูท" เช่น √4 = 2 และ √2 = 1.41421356237
# ใน python เราสามารถใช้ function ที่ชื่อว่า sqrt จาก module ชื่อว่า math ได้
import math
# เช่น ถ้าจะหา √4
รากที่สองของ4 = math.sqrt(4)
print(รากที่สองของ4) # 4
# เช่น ถ้าจะหา √2
รากที่สองของ2 = math.sqrt(2)
print(รากที่สองของ2) # 1.4142135623730951

# ในทางคณิตศาสตร์ เราทราบว่า จำนวนลบไม่มีรากที่สองที่เป็นคำนวนบวก (เพราะรากที่สองไม่ใช่จำนวนจริง)
# หากเรานำค่าลบมาใส่ใน sqrt
# รากที่สองของลบ2 = math.sqrt(-2)
# จะเกิด Error ขึ้น คือ ValueError: math domain error

# ให้นักศึกษาเขียน loop เพื่อตรวจสอบว่าใน list_short, list_medium, list_long นี้
# เมื่อนำตัวเลขแต่ละตัวมาหารากที่สอง จะเกิด error ทั้งหมดกี่ครั้ง

# ***ในข้อนี้ โปรแกรมที่ถูกต้องสามารถเขียนแบบไม่ใช่ try-except ได้***
# ***แต่เนื่องจากข้อนี้ต้องการวัดว่า นศ ใช้ try-except เป็นหรือไม่***
# ***ถ้า นศ เขียนแบบไม่ใช้ try-except จะได้คะแนนไม่เต็ม แม้โปรแกรมจะถูกต้อง***
# ***(แต่ก็ได้เยอะนะ)***

# ลองตัวอย่างสั้นๆก่อน list_short มีสมาชิก 8 ตัว
list_short = [0, 1, -1, 0.000001, -0.000001, 100000000, -100000000, -0]
# ผลลัพธ์ที่ควรได้คือ เกิด error 3 ครั้ง
# (คือ ที่ -1,  -0.0000001, และ -10000000 <<< นศ ไม่ต้องเก็บนะว่าตัวไหนบ้าง ผมใส่ให้ นศ ใช้ตรวจคำตอบเฉยๆ)
# -0 = 0 ดังนั้น ไม่เกิด error
print(list_short)

# ถ้าเขียน code มาดี จะนำมาใช้กับ list_medium ได้เลย หรือ เปลี่ยนไม่เยอะ
# list_medium มีสมาชิก 100 ตัว
list_medium = [1, 5, 26, 16, 55, 6, -39, 63, -10, 81,
         7, 66, 21, 32, -15, 6, 50, 29, -2, 48,
         -33, -32, 42, 35, 18, 52, 32, 49, 90, 53,
         39, 55, 20, 79, -26, -9, -42, 2, 64, 64,
         46, 17, 38, -37, 2, -45, -6, 40, 55, 7,
         -3, 77, 60, 71, 26, 67, 53, 87, 13, 6,
         20, -32, -9, 23, 56, -7, 44, 37, 33, 29,
         47, 85, -14, 34, 32, -47, -16, 87, -48, -4,
         -7, 28, 23, 85, -28, 85, -8, 75, 21, 38,
         -1, 12, 32, -16, 45, 39, -19, -32, -24, -7]
# ผลลัพธ์ที่ควรได้คือ เกิด error 30 ครั้ง



# ถ้า นศ ผ่าน list_medium มาได้ list_long ก็ไม่น่าจะมีปัญหาแล้ว
# list_long มีสมาชิก 1000 ตัว
list_long = [64, -44, 64, 25, 20, 23, 70, 46, -28, 40, 54, 9, 17, 1, -9, 0, 22, -28, -32, 75, 1, 55, 78, 86, 33, 21, -2, 7, 6, 31, 35, -29, 47, 23, 3, 52, 19, 78, 21, -26, 3, 21, 79, 40, 42, 34, 41, -28, 50, 15, 3, 62, -16, 40, 36, 88, 40, -6, 39, 62, -30, 77, 16, 6, 45, -4, 38, 39, 18, 30, -9, 45, 79, 28, 76, 25, -39, -3, 45, -2, -11, 17, 1, 7, 26, 64, 18, -10, 36, 87, 15, 8, 71, 80, 17, -49, 11, 39, -32, 26,
-36, 14, 48, 45, 68, 17, 42, 36, 14, 20, -17, -6, 52, 65, 6, 87, 35, 35, 20, -24, 82, 28, 37, 59, 9, -37, -31, -32, -7, 88, 47, 51, 11, -5, -7, 13, 39, 43, -35, 82, 30, -40, 56, 36, 17, 5, 32, 2, -43, 80, 16, 32, -36, -33, 41, 32, 78, -1, 46, -33, -36, 34, -47, 79, 12, 34, 79, 23, -16, -15, 5, -28, -16, 29, -22, 24, 10, -29, -42, -9, 53, 10, -32, -29, -29, 13, 62, 11, 52, 9, 24, 22, 8, 51, 27, 1, -46, 33, 25, 29,
23, 15, 25, 22, 38, 41, 23, 48, -36, 0, 13, -46, -10, 28, 24, 35, 12, 24, 43, 45, 41, -17, 77, -25, 18, 62, 3, -39, 6, 24, 62, -3, 18, 30, 31, 2, 13, 15, -47, 30, -21, 41, 40, 23, 9, -50, 1, 5, 72, 83, 0, 89, 41, -21, 19, 31, 8, 7, -33, -2, -39, 35, 57, 6, -9, 64, -46, 49, -38, 48, 43, -27, 11, 59, -50, 5, 82, 42, -6, -50, -12, 0, 28, 67, -8, 37, -1, 1, 8, -28, -42, 60, -34, 39, -30, -31, 7, 13, 22, -10,
47, 40, 37, -27, 5, 77, 15, -40, 18, 63, 34, 63, 27, -45, 28, 18, 6, 11, -8, 1, -49, 38, -23, 8, -18, 22, 26, 35, -2, 73, 35, 14, 11, 27, -4, 44, 43, 23, 22, 83, 34, 7, 69, -28, -32, 10, -29, 14, -3, 81, 88, 81, -2, 81, -15, 2, -46, 15, -29, 67, 33, 4, 74, -34, 41, 49, 89, 3, 14, 30, -34, 44, 10, 81, 25, 2, 34, 3, 85, -31, 13, 27, 37, 83, 18, 60, -32, 6, -23, -4, 49, -15, -27, 50, 49, -6, 16, -38, -14, 1,
7, -37, 19, 82, -3, -42, -3, -33, 48, -47, 34, 89, 86, 83, -10, -6, 28, -30, -10, 43, 4, -1, 40, 13, 84, 17, 21, 9, 34, 48, 56, -38, -9, 21, 25, 45, 26, -43, -47, 77, 2, 38, 0, 19, 24, 73, 31, -1, 29, 12, 25, 23, -5, 10, -5, 85, -3, 43, 32, 48, 67, -42, -10, 58, -31, 49, 26, 55, 72, 35, 31, 12, 52, 5, 63, 59, -4, 38, -16, 4, 12, -30, -2, -45, 35, 22, 89, -5, 84, -40, 90, 80, 90, -2, 6, 74, -6, 23, 34, -44,
4, -28, -16, -27, 49, 89, 27, 7, 37, 0, -36, 34, 0, 77, -13, 19, 37, 76, 47, 85, 10, 66, 49, -5, 58, 53, -13, 42, 41, -50, -17, 8, 33, 86, -7, -9, 26, -36, -15, 49, -42, 50, -1, 43, 27, 17, 41, 89, 23, 8, 33, 31, 88, 35, 69, 42, 72, 66, -10, -2, 9, -35, 2, -9, 34, 50, -42, -1, 87, 6, 18, -26, 35, -36, 21, -28, -10, 14, -10, -46, 9, 6, -30, -19, 15, 68, 1, 8, 33, 17, -1, 27, 44, 47, 48, 8, -6, 22, 80, 75,
-16, 34, 69, 65, -21, -43, 10, 25, -5, 52, -40, 3, 32, -33, 60, 22, 20, 42, 30, 5, -24, 16, 82, 52, 45, -32, 48, -9, -4, -7, 52, -11, 39, 27, 29, -31, 34, 45, -19, 4, 16, 21, 43, -23, 32, 43, 40, 44, 48, -23, 90, 15, 12, -1, 34, -46, 33, -7, 32, -44, 23, 33, 2, -25, -9, 20, 3, 72, 52, 28, 53, 4, 50, 22, 42, 13, 24, 50, -26, -17, 36, 37, 28, 49, -39, 40, -9, 4, 45, 45, 3, -33, -13, 82, 27, 34, -20, 85, 39, -2,
20, 77, 47, -21, 70, -39, -30, -26, 11, -23, 26, -49, 27, 2, -2, -4, 84, -38, 18, 34, -9, 74, 16, 11, -9, 37, 26, 46, 12, 47, 33, 54, -14, -8, 10, 5, -6, -49, 11, 50, 10, 73, 77, 1, -3, 79, -2, -25, -12, -37, 55, 72, 42, 22, 28, 23, 50, -23, 0, 74, -13, 56, 1, -33, -10, 74, -7, 85, 14, 70, 66, -25, 81, -36, 11, -42, -5, 34, -1, 18, 75, 11, 33, 9, 42, 81, 24, 1, -30, -26, 89, 44, -40, -22, 79, -4, 36, 52, 16, 36,
28, 32, 41, 12, -31, -36, 16, 40, 70, 8, -41, 15, 43, 16, 18, 66, -22, 48, 46, -10, -17, -6, 57, 0, 32, 54, 4, -10, 33, -42, 8, 56, 27, 10, 24, 56, -37, -24, -4, 7, 19, 33, 28, -8, 44, 86, -30, 7, 76, -6, 36, 80, -12, 53, 8, -50, 41, 35, 87, 31, 26, 88, 36, 24, 10, 42, 26, 73, 10, 45, 0, 9, 8, -12, -34, 56, 49, 8, -3, 9, 75, -40, 10, 85, 30, 50, -10, 53, -36, 46, 6, 48, 56, 29, 0, 11, -24, 52, -12, 48,
9, 90, 0, 51, 37, -10, 21, -12, 17, 62, 30, -19, 26, 13, 65, 70, 36, 15, 5, 50, 45, -28, -20, 23, 68, 18, 82, -31, -2, 0, -49, 32, -4, -16, -4, 41, -35, 38, -24, 34, -30, 36, 46, -21, -47, 2, 62, -48, -22, 43, 34, -47, 32, 16, 39, 5, 32, 33, -6, 56, 25, 47, 68, -9, -46, 15, -43, 20, -28, 39, -21, 15, 19, 14, 62, 32, 34, 38, 35, 3, 57, 57, 24, 30, -2, -36, -2, 38, -47, -11, 42, 43, 9, -4, 45, 39, 29, 13, 23, 83]
# ผลลัพธ์ที่ควรได้คือ เกิด error 294 ครั้ง

# หรืออยากจะใช้ while ก็เลือกเอา
# for i in range(0,2):
#    print(i)

# หรืออยากจะใช้ while ก็เลือกเอา
#while True:
#    print(0)
#    break

# CLASS and INHERITANCE [35 PTS]
# ให้นักศึกษาเขียน class
# 1. Paper ที่มี __init__ รับค่า length มาเก็บไว้
# 2. Pen ที่มี __init__ รับค่า speed มาเก็บไว้
#    โดยที่ Pen มี def write(self, paper) ซึ่งจะ return ค่า paper.length / self.speed
# 3. SuperPen ที่มี __init__ รับค่า speed มาเก็บไว้
#    โดยที่ เป็นซุปเปอร์ปากกาเขียนเร็ว คือ ได้เป็นสองเท่าของความเร็วที่รับมาใน init
#    ******แต่เร็วเป็นสองเท่าเฉพาะสองครั้งแรกที่ write เท่านั้น******
#    คือ หาก write ถูกเรียกใช้ครั้งแรก และ ครั้งที่สอง (สำหรับ object นั้นๆ) write(self, paper) จะใช้ 2 * speed เป็นตัวหาร
#    ตั้งแต่ครั้งที่ 3 เป็นต้นไป ให้ทำเหมือน Pen ธรรมดา return ค่า paper.length / self.speed
#
# คำใบ้ __init__ ของ SuperPen ควรจะเก็บค่าตัวแปรเพิ่มตัวหนึ่ง เพื่อใช้นับว่า write ถูกเรียกใช้ไปกี่ครั้งแล้ว
# เช่น อาจจะเริ่มที่ 0 แล้ว +1 ทุกครั้งที่ write ถูกเรียกใช้ หรือ เริ่มที่ 2 แล้ว -1 ทุกครั้งที่ write ถูกเรียกใช้

class Paper:
    def __init__(self, length):
        self.length = length

class Pen:
    def __init__(self, speed):
        self.speed = speed

    def write(self, paper):
        return paper.length / self.speed

class SuperPen(Pen):
    def __init__(self, speed):
        super().__init__(speed)
        self.super_limit = 2

    def write(self, paper):
        if self.super_limit > 0:
            self.super_limit -= 1
            return paper.length / (self.speed * 2)
        else:
            return super().write(paper)

pen12 = Pen(12)
superpen10 = SuperPen(10)
superpen12 = SuperPen(12)

print("pen12 write paper120", pen12.write(Paper(120))) # ควรได้ 10
print("pen12 write paper150", pen12.write(Paper(150))) # ควรได้ 12.5
print("pen12 write paper120", pen12.write(Paper(120))) # ควรได้ 10
print("pen12 write paper150", pen12.write(Paper(150))) # ควรได้ 12.5

print("superpen10 write paper120 (first use)", superpen10.write(Paper(120)))  # ควรได้ 6
print("superpen10 write paper150 (second use)", superpen10.write(Paper(150))) # ควรได้ 7.5
print("superpen10 write paper120", superpen10.write(Paper(120))) # ควรได้ 12
print("superpen10 write paper150", superpen10.write(Paper(150))) # ควรได้ 15

print("superpen12 write paper120 (first use)", superpen12.write(Paper(120)))  # ควรได้ 5
print("superpen12 write paper150 (second use)", superpen12.write(Paper(150))) # ควรได้ 6.25
print("superpen12 write paper120", superpen12.write(Paper(120))) # ควรได้ 10
print("superpen12 write paper150", superpen12.write(Paper(150))) # ควรได้ 12.5

# คำใบ้ข้อ LOOP
# 1. ดูว่าจะใช้ for หรือ while
#    ลองเขียนแค่ print แต่ละตัว ตั้งแต่ first จนถึง last ดู
#    ถ้าจะใช้ for ก็ดูว่า จะใช้วน list ไหน หรือใช้ range
#    ถ้าจะใช้ while ก็ดูว่า จะเก็บค่า "ตัวปัจจุบัน" อย่างไร
# 2. ดูให้ดีว่า first last ที่ออกมาเป็นอะไร ตรงตามโจทย์ไหม ถ้าไม่ตรงก็ลองเปลี่ยนดู
#    เช่น จาก last-1 อาจจะเปลี่ยนเป็น last+1 ตามความเหมาะสม
# 3. สร้างตัวแปรมาเก็บผลรวม ของ แต่ละตัว ยกกำลังสอง
#    โดยสร้างตัวแปรไว้ข้างนอก loop แล้วทุกครั้งที่วน ก็บวกตัวกำลังสองเข้าไปในผลรวม
# 4. อย่าลืม print คำตอบ คือ ตัวแปรที่เราใช้นับ

# คำใบ้ข้อ ERROR HANDLING
# 1. อย่าพึ่งเริ่มเขียน loop ถ้ายังไม่แน่ใจ ลองเขียนทีละตัวก่อน
#    try...except... ครอบ math.sqrt(list_short[0])
#    ถ้าเกิด error ขึ้น ก็ให้มัน print อะไรก็ได้ออกมา
#    แล้วลองเปลี่ยนเลขจาก 0 เป็น 1, 2, 3, ..., 7
#    ถ้าทำถูก จะสามารถ run ได้แบบไม่มี error
# 2. พอได้แล้ว ก็เอามันใส่ loop
#    แล้วแปลง input ที่เราเอาใส่ math.sqrt ให้เหมาะกับ loop ที่เราเขียน
# 3. สร้างตัวแปรมานับว่าเกิด error กี่ครั้ง
#    โดยสร้างตัวแปรไว้ข้างนอก loop แล้วทุกครั้งที่เกิด error ก็บวก 1 เพิ่มไปให้ตัวแปรนั้น
# 4. อย่าลืม print คำตอบ คือ ตัวแปรที่เราใช้นับ

# คำใบ้ข้อ CLASS
# จริงๆแล้วข้อนี้เหมือนข้อที่ให้ในแนวข้อสอบเลย แค่เปลี่ยนชื่อ class กับตัวเลขนิดหน่อย <3

# Bonus

# อาจารย์มาร์ชให้นิยามคำว่า "ความสอง" (สำหรับข้อนี้) ว่า
# ความสองของตัวเลข คือ จำนวนครั้งที่ตัวเลขนั้นถูกนำไปหารด้วยสองซ้ำๆจนกว่าจะหารด้วยสองไม่ลงตัว
# เช่น 60
# นำ 60 ไปหารด้วย 2         ผลคือ หารได้ลงตัว เหลือ 60/2 = 30 (ครั้งที่ 1)
# นำผลหาร 30 ไปหารด้วย 2 ซ้ำ ผลคือ หารได้ลงตัว เหลือ 30/2 = 15 (ครั้งที่ 2)
# นำผลหาร 15 ไปหารด้วย 2 ซ้ำ ผลคือ หารไม่ลงตัวแล้ว
# ดังนั้น 60 จึงมีค่า"ความสอง" เท่ากับ 2

# เช่น 17
# นำ 17 ไปหารด้วย 2         ผลคือ หารไม่ลงตัว
# ดังนั้น 17 จึงมีค่า"ความสอง" เท่ากับ 0

# เช่น 64
# นำ 64 ไปหารด้วย 2         ผลคือ หารได้ลงตัว เหลือ 64/2 = 32 (ครั้งที่ 1)
# นำผลหาร 32 ไปหารด้วย 2 ซ้ำ ผลคือ หารได้ลงตัว เหลือ 32/2 = 16 (ครั้งที่ 2)
# นำผลหาร 16 ไปหารด้วย 2 ซ้ำ ผลคือ หารได้ลงตัว เหลือ 16/2 = 8 (ครั้งที่ 3)
# นำผลหาร 8 ไปหารด้วย 2 ซ้ำ ผลคือ หารได้ลงตัว เหลือ 8/2 = 4 (ครั้งที่ 4)
# นำผลหาร 4 ไปหารด้วย 2 ซ้ำ ผลคือ หารได้ลงตัว เหลือ 4/2 = 2 (ครั้งที่ 5)
# นำผลหาร 2 ไปหารด้วย 2 ซ้ำ ผลคือ หารได้ลงตัว เหลือ 2/2 = 1 (ครั้งที่ 6)
# นำผลหาร 1 ไปหารด้วย 2 ซ้ำ ผลคือ หารไม่ลงตัวแล้ว
# ดังนั้น 64 จึงมีค่า"ความสอง" เท่ากับ 6

# ให้นักศึกษาเขียน code พึ่งคำนวนค่า"ความสอง"ของ และหาค่า"ความสอง"ตัวเลขต่อไปนี้

# B1
# ใน 1 ปี มีทั้งหมด 365*24*60*60 = 31536000 วินาที (ไม่นับ leap years & leap seconds เช่น 29 ก.พ.)
# ให้นักศึกษาหาค่า"ความสอง"ของ 31536000
B1_answer = 22 # ใช้ตัวแปรนี้ตอบข้อ B1
tes = 31536000
target = 31536000/2
target1 = 15768000/2
target2 = 7884000/2
target3 = 3942000/2
target4 = 985500/2
target5 = 492750/2
target6 = 246375/2
target7 = 123187.5/2
target8 = 61593.75/2
target9 = 30796.875/2
target10 = 15398.4375/2
target11 = 7699.21875/2
target12 = 3849.609375/2
target13 = 1924.8046875/2
target14 = 962.40234375/2
target15 = 481.201171875/2
target16 = 240.6005859375/2
target17 = 120.30029296875/2
target18 = 60.150146484375/2
target19 = 30.0750732421875/2
target20 = 15.03753662109375/2
target21 = 7.518768310546875/2
target22 = 3.7593841552734375/2

print(target)
print(target1)
print(target2)
print(target3)
print(target4)
print(target5)
print(target6)
print(target7)
print(target8)
print(target9)
print(target10)
print(target11)
print(target12)
print(target13)
print(target14)
print(target15)
print(target16)
print(target17)
print(target18)
print(target19)
print(target20)
print(target21)
print(target22)


# B2
# โลกอยู่ห่างจากดวงอาทิตย์โดยเฉลี่ยประมาณ 150 ล้านกิโลเมตร
# ให้นักศึกษาหาค่า"ความสอง"ของ 150 ล้าน
B2_answer = None # ใช้ตัวแปรนี้ตอบข้อ B2

# B3
# ให้นักศึกษาหาค่า"ความสอง"ของรหัสนักศึกษาของตนเอง
B3_answer = None # ใช้ตัวแปรนี้ตอบข้อ B3